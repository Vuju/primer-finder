from abc import ABC, abstractmethod
from typing import Generator, Tuple, Any

from pandas import DataFrame, Series

from matching.dtos.search_parameter_object import SearchParameterObject
from primer_finder.matching.dtos.match_result_dto import MatchResultDTO


class Connector(ABC):
    """
    An abstract base class that defines the interface for all connectors for the primer finder class.
    """
    @abstractmethod
    def read_sequences(self, forward_primer, reverse_primer, batch_size) -> (
            Generator)[tuple[Any, Any, MatchResultDTO, MatchResultDTO], Any, None]:
        """
        Returns a generator that yields each sequence in the input.
        """
        pass

    @abstractmethod
    def write_output(self, information: list[tuple[Any, MatchResultDTO, MatchResultDTO, str, list[int], int]]):
        """
        writes all the important information back to the output.
        information should be a list of a tuples like:
        [(read_metadata, forward_match, reverse_match, inter_primer_sequence, possible_orf, expected distance)]
        """
        pass

    @abstractmethod
    def get_number_of_sequences(self) -> int:
        """
        Returns the number of sequences in the input.
        """
        pass


    #------------------------------------ ORF matching methods ---------------------------------

    @abstractmethod
    def get_number_of_pairs_to_decide(self):
        """
        Returns the number of primer pairs for which the orf has to be determined.
        """
        pass

    @abstractmethod
    def read_pairs_chunk(self, chunk_size: int, batch_size: int = None) -> Generator[DataFrame, Any, None]:
        """
        Reads a chunk of pairs of sequences from the primer-pairs table.
        :param chunk_size: Size of each chunk generated by the generator.
        :param batch_size: Size of each batch read from the database.
        :return: A generator that yields a chunk of primer pairs.
        """
        pass

    @abstractmethod
    def write_pair_chunk(self, solved: DataFrame, tmp: bool = True):
        """
        Updates the primer-pairs table with the solved pairs.
        :param solved: Entries to update in the primer-pairs table.
        :param tmp: Whether the entries should be written to the temporary table or directly to primer_pairs.
        :return: None
        """
        pass

    @abstractmethod
    def get_remaining_unsolved_count(self) -> int:
        """
        Returns the number of unsolved entries in the primer-pairs table.
        :return: Int, number of unsolved entries.
        """
        pass

    @abstractmethod
    def get_next_unsolved_sequence(self) -> Series | DataFrame:
        """
        Fetches a single unsolved entry from the primer-pairs table.
        :return: Single line dataframe. May automatically be converted to a Series object.
        """
        pass

    @abstractmethod
    def fetch_sampled_solved_related_sequences(self, current_entry: DataFrame, level: str, lower_reference_threshold: int,
                                               upper_reference_threshold: int, random_seed: int = None) -> tuple[DataFrame, bool]:
        """
        Returns a comparison group for the given entry, based on taxonomy.
        :param current_entry: The entry for which to fetch a comparison group.
        :param level: The taxonomy level in which to search for the related specimen.
        :param lower_reference_threshold: Minimum number of related specimens to search for.
        :param upper_reference_threshold: Maximum number of related specimens to search for.
        :param random_seed: Optional seed for deterministic sampling.
        :return: A set of related and whether the minimum number of related specimens was reached.
        """
        pass

    @abstractmethod
    def fetch_unsolved_related_sequences(self, current_entry: DataFrame, level: str):
        """
        Fetches all related sequences for the given entry that are unsolved as well.
        :param current_entry: The entry for which to fetch a comparison group.
        :param level: The taxonomy level in which to search for the related specimen.
        :return: A set of related and whether there were any related specimens at all.
        Usually there should be at least one related specimen (itself), but due to a bug which I did not find, that was not always the case.
        """
        pass

    @abstractmethod
    def setup_orf_module(self, search_parameters: SearchParameterObject):
        """
        Setup method for the ORF module. E.g. setting up temporary tables.
        :param search_parameters: Query parameters for the ORF module to help with temporary constructions.
        :return: None
        """
        pass

    @abstractmethod
    def cleanup_orf_module(self):
        """
        A cleanup method for the ORF module. E.g. removing temporary tables.
        :return: None
        """
        pass
